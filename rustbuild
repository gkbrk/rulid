#!/usr/bin/env python3
from collections import namedtuple
from pathlib import Path
import hashlib
import os
import subprocess
import tempfile
import time

class Log:
    def info(self, *args):
        t = time.strftime("%H:%m:%S")
        print(f"[{t}]", " ".join(args))
Log = Log()

class PkgMeta:
    def __init__(self, f):
        self.data = []

        for line in f:
            line = line.strip()
            if line == "":
                continue
            parts = line.split(" ", 1)
            self.data.append((parts[0].strip(), parts[1].strip()))

    def first(self, name, default=None):
        for k, v in self.data:
            if k == name:
                return v
        return default

    def list(self, name):
        for k, v in self.data:
            if k == name:
                yield v

    def __getattr__(self, attr):
        return self.first(attr)

def cache_path(key):
    default = os.path.expanduser("~/.cache")
    cache_home = os.environ.get("XDG_CACHE_HOME", default)
    cache_dir = f"{cache_home}/rustbuild"
    hashkey = hashlib.md5(key).hexdigest()
    return f"{cache_dir}/{hashkey}"

def download_cache(url, ttl=60*60*24):
    """
    Download a file with curl and cache it for ttl seconds
    """
    p = Path(cache_path(url.encode('utf-8')))
    p.parent.mkdir(parents=True, exist_ok=True)

    if p.exists() and time.time() - p.stat().st_mtime < ttl:
        return p
    else:
        subprocess.run(["curl", url, "-o", p], capture_output=True)
        return p


build_path = Path(".") / "build"
build_path = build_path.resolve()

def build_deps(meta):
    for dep in meta.list("dep"):
        dep = dep.split(" ")
        name = dep[0]
        method = dep[1]
        location = dep[2]

        if method == "path":
            yield name, build(location, name)
        elif method == "local":
            p = Path(location).resolve()
            with tempfile.TemporaryDirectory() as td:
                subprocess.run(["tar", "xzf", p], cwd=td)
                yield name, build(td, name)
        elif method == "url":
            with tempfile.TemporaryDirectory() as td:
                tf = download_cache(location)
                subprocess.run(["tar", "xzf", tf], cwd=td)
                yield name, build(td, name)

def build(path, overrideName=None):
    path = Path(path).resolve()
    h = hashlib.md5(f"{path}/{overrideName}".encode("ascii")).hexdigest()

    m = open(path / "pkgmeta")
    meta = PkgMeta(m)
    m.close()

    name = meta.name
    if overrideName is not None:
        name = overrideName

    Log.info("Building", name)
    Log.info(f"  Package name {meta.name}")

    pkg_type = meta.first("type", "bin")

    depflags = []
    for n, p in build_deps(meta):
        depflags.append("--extern")
        depflags.append(f"{n}={p}")

    call = [
        "rustc",
        "--crate-name",
        h,
        "-C",
        f"metadata={h}",
        "--crate-type",
        pkg_type,
        "--out-dir",
        build_path / "out",
        "-C",
        "opt-level=3",
        "-C",
        "lto",
        *depflags,
        "-L",
        build_path / "out",
        meta.first("entry", "main.rs"),
    ]

    # print(call)
    subprocess.run(
        call, cwd=path,
    )

    Log.info("Built", name)

    output = build_path / "out"

    if pkg_type == "lib":
        output /= f"lib{h}.rlib"

    return str(output)


build(".")
